{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","InputView","props","className","rows","value","content","onChange","placeholder","MethodSelector","items","map","i","key","type","id","name","checked","current","htmlFor","OutputView","links","l","CopyBtn","text","onCopy","convert","method","group","split","link","test","base64","RegExp","$1","Array","length","join","replace","Buffer","toString","str","JSON","parse","e","isJson","jsonConf","obfs","net","path","host","add","ps","port","tls","decodeVmess","filter","useState","setContent","setMethod","target","href"],"mappings":"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","file":"static/js/main.b870d550.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport './App.css';\n\nfunction InputView(props) {\n  return (\n    <textarea \n      className=\"main-item input-view\" \n      rows=\"5\"\n      value={props.content} \n      onChange={props.onChange} \n      placeholder=\"输入 vmess 链接，多个链接使用换行隔开\"></textarea>\n  )\n}\n\nfunction MethodSelector(props) {\n  let items = props.items.map((i) => {\n    return (\n      <div key={i}>\n        <input type=\"radio\" id={i} value={i} name={i} checked={props.current === i} onChange={props.onChange}></input>\n        <label htmlFor={i}>{i}</label>\n      </div>\n    )\n  })\n  return (\n    <div className=\"main-item method-selector \">\n      {items}\n    </div>\n  )\n}\n\nfunction OutputView(props) {\n  let links = props.content.map(l => {\n    return (\n      <div className=\"output-item\" key={l}>{l}</div>\n    )\n  })\n  return (\n    <div className=\"main-item output-view\">\n      {links}\n    </div>\n  )\n}\n\nfunction CopyBtn(props) {\n  return (\n    <CopyToClipboard   text={props.text} onCopy={props.onCopy}>\n      <span className=\"copy-btn\">打开Quantumlt并通过URI导入</span>\n    </CopyToClipboard>\n  )\n}\n\nfunction App() {\n  const [content, setContent] = useState(\"\")\n  const [method, setMethod] = useState(\"none\")\n  const [group, setGroup] = useState(\"Fndroid\")\n\n  const avaliableMethods = ['none', 'aes-128-cfb', 'aes-128-gcm', 'chacha20-ietf-poly1305']\n\n  let handleInputChange = (e) => {\n    setContent(e.target.value)\n  }\n\n  let handleMethodChange = (e) => {\n    setMethod(e.target.value)\n  }\n\n  let handleCopySuccess = (e) => {\n    window.location.href = 'quantumult://'\n  }\n\n  let computeText = () => {\n    return convert(content, method, group).map(l => `vmess://${urlsafeBase64Encode(l)}`).join('\\n')\n  }\n\n  return (\n    <div className=\"App\">\n      <InputView content={content} onChange={handleInputChange}></InputView>\n      <MethodSelector\n        items={avaliableMethods}\n        current={method}\n        onChange={handleMethodChange}></MethodSelector>\n      <OutputView content={convert(content, method, group)}></OutputView>\n      <CopyBtn text={computeText()} onCopy={handleCopySuccess}></CopyBtn>\n    </div>\n  );\n}\n\nfunction convert(content, method, group) {\n  return content.split('\\n').map(i => decodeVmess(i, method, group)).filter(i => i)\n}\n\nfunction decodeVmess(link, method, group) {\n  if (/^vmess:\\/\\/(.*?)$/.test(link)) {\n    let content = urlsafeBase64Decode(RegExp.$1)\n    if (isJson(content)) {\n      // v2rayN style\n      let jsonConf = JSON.parse(content)\n      const ua = 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/16A5366a'\n      let obfs = `,obfs=${jsonConf.net === 'ws' ? 'ws' : 'http'},obfs-path=\"${jsonConf.path || '/'}\",obfs-header=\"Host:${jsonConf.host || jsonConf.add}[Rr][Nn]User-Agent:${ua}\"`\n      let quanVmess = `${jsonConf.ps} = vmess,${jsonConf.add},${jsonConf.port},${method},\"${jsonConf.id}\",over-tls=${jsonConf.tls === 'tls' ? 'true' : 'false'},certificate=1${jsonConf.type === 'none' && jsonConf.net !== 'ws' ? '' : obfs},group=${group}`\n      return quanVmess\n    } else {\n      // Quantumult style\n      return \"\"\n    }\n  }\n}\n\nfunction isJson(str) {\n  try {\n    JSON.parse(str)\n  } catch (e) {\n    return false\n  }\n  return true\n}\n\nfunction urlsafeBase64Decode(base64) {\n  // Add removed at end '='\n  base64 += Array(5 - base64.length % 4).join('=');\n  base64 = base64\n    .replace(/-/g, '+') // Convert '-' to '+'\n    .replace(/_/g, '/'); // Convert '_' to '/'\n  return new Buffer(base64, \"base64\").toString();\n}\n\nfunction urlsafeBase64Encode(url) {\n  return new Buffer(url).toString(\"base64\").replace(/-/g, '+').replace(/\\\\/g, '_').replace(/=+$/, '')\n}\n\n\nexport default App;\n"],"sourceRoot":""}